struct node {
    int id;
    int dis;
    node(int _id, int _dis) {
        id = _id;
        dis = _dis;
    }
    friend bool operator < (node a, node b) {
        return a.dis < b.dis;
    }
};



struct Edge {
    int v, w;
    Edge(int a, int b) {
        v = a;
        w = b;
    }
};

vector<Edge> e[10005];
int n,m;
int dis[10005];

void dijkstra() {
	cin >> n >> m;
	for(int i = 1;i <= m;i++){
		int x,y,z;
		cin >> x >> y >> z;
		e[x].push_back(Edge(y,z));
	}
	
    for (int i = 0; i <= n + 1; i++) dis[i] = 1e9;
    dis[1] = 0;
    priority_queue<node> q;
    q.push(node(1, 0));
    while (!q.empty()) {
        node u = q.top();
        q.pop();
        if (u.dis != dis[u.id]) continue;
        for (int i = 0; i < e[u.id].size(); i++) {
            Edge y = e[u.id][i];
            if (dis[y.v] > y.w + dis[u.id]) {
                dis[y.v] = y.w + dis[u.id];
                q.push(node(y.v, dis[y.v]));
            }
        }
    }
    
    for(int i = 2;i <= n;i++)
		cout << "min_dis from " << 1 << " to " << i << " equals to " << dis[i] << '\n';  
}

int f[105][105];

void floyd(){
	cin >> n >> m;
	for(int i = 1;i <= m;i++){
		int x,y,z;
		cin >> x >> y >> z;
		f[x][y] = z;
	}
	
	for(int i = 1;i <= n;i++)
		for(int j = 1;j <= n;j++)
			if(!f[i][j]) f[i][j] = i == j ? 0 : 1e9;
	for(int k = 1;k <= n;k++)
		for(int i = 1;i <= n;i++)
			for(int j = 1;j <= n;j++)
				f[i][j] = min(f[i][j],f[i][k] + f[k][j]);
	for(int i = 1;i <= n;i++){
		for(int j = 1;j <= n;j++){
			cout << "dis " << i << "to " << j << " equals to " << f[i][j] << '\n';
		}
	}
}

int main(){
	dijkstra();
	floyd();
} 

/*
case 1:
8 11
1 2 1
3 1 2
2 4 2
4 3 1
4 6 8
5 4 2
6 5 2
5 7 2
7 6 3
7 8 3
8 6 2

case 2:
4 8
1 2 2
1 3 6
2 3 3
3 1 7
1 4 4
4 1 5
4 3 12
3 4 1
*/
